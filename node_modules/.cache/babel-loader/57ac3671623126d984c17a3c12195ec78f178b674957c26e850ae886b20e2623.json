{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\milto\\\\Documents\\\\GitHub\\\\Web-App-Gestor-de-Restaurants\\\\src\\\\screens\\\\All.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./All.css\"; // Importa el archivo CSS para estilos\nimport { YOUTUBE_API_KEY } from \"./apiKeys\"; // Importa la API key de YouTube\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst All = () => {\n  _s();\n  // Estados para manejar la carga y los mensajes\n  const [loadingVideos, setLoadingVideos] = useState(false); // Estado para el spinner\n  const [dialogMessage, setDialogMessage] = useState(\"\"); // Estado para el mensaje en el diálogo\n\n  // Estados para los datos del reviewer\n  const [reviewers, setReviewers] = useState([]); // Lista de reviewers\n  const [channelId, setChannelId] = useState(\"\"); // ID del canal de YouTube\n  const [lastCheckedVideoId, setLastCheckedVideoId] = useState(\"\"); // ID del último vídeo cargado\n\n  // Función para obtener detalles de un vídeo de YouTube\n  const fetchVideoDetailsFromYoutube = async videoId => {\n    try {\n      const response = await axios.get(`https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id=${videoId}&key=${YOUTUBE_API_KEY}`);\n      if (response.data.items && response.data.items.length > 0) {\n        return response.data.items[0].snippet; // Devuelve los detalles del vídeo\n      }\n      return null; // Si no se encuentra el vídeo\n    } catch (error) {\n      console.error(\"Error al obtener detalles del video:\", error);\n      return null; // En caso de error\n    }\n  };\n\n  // Función para cargar los últimos vídeos de YouTube\n  const handleLoadLatestVideos = async (channelId, reviewerId, lastCheckedVideoId) => {\n    if (!channelId) {\n      alert(\"No se ha proporcionado un Channel ID.\");\n      return;\n    }\n    if (loadingVideos) return; // Evitar duplicación de solicitudes\n    setLoadingVideos(true); // Activar el spinner\n    setDialogMessage(\"\"); // Reiniciar el mensaje del diálogo\n\n    try {\n      let nextPageToken = null;\n      let latestVideos = [];\n      let foundOlderVideo = false;\n      console.log(\"Iniciando carga de vídeos...\");\n\n      // Bucle para obtener vídeos paginados\n      do {\n        console.log(`Solicitud realizada con token: ${nextPageToken}`);\n        const response = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${channelId}&maxResults=10&order=date&pageToken=${nextPageToken || \"\"}&key=${YOUTUBE_API_KEY}`);\n\n        // Procesar los vídeos obtenidos\n        for (const video of response.data.items) {\n          if (video.id.videoId === lastCheckedVideoId) {\n            foundOlderVideo = true; // Detener si encontramos el último vídeo cargado\n            console.log(\"Vídeo antiguo encontrado, deteniendo búsqueda...\");\n            break;\n          }\n          latestVideos.push(video); // Agregar el vídeo a la lista\n        }\n        nextPageToken = response.data.nextPageToken; // Actualizar el token de la siguiente página\n      } while (nextPageToken && !foundOlderVideo); // Continuar mientras haya más páginas y no se encuentre el vídeo más antiguo\n\n      // Si se encontraron vídeos nuevos\n      if (latestVideos.length > 0) {\n        const latestVideoId = latestVideos[0].id.videoId;\n        const updatedData = {\n          lastCheckedVideo: `https://www.youtube.com/watch?v=${latestVideoId}`\n        };\n\n        // Actualizar el último vídeo comprobado en Firebase (simulado aquí)\n        // await handleUpdateReviewer(reviewerId, updatedData);\n\n        // Actualizar el estado local de reviewers\n        setReviewers(prevReviewers => prevReviewers.map(reviewer => reviewer.id === reviewerId ? {\n          ...reviewer,\n          lastCheckedVideo: `https://www.youtube.com/watch?v=${latestVideoId}`\n        } : reviewer));\n        setDialogMessage(`Se han cargado ${latestVideos.length} vídeos nuevos.`); // Mostrar mensaje de éxito\n      } else {\n        setDialogMessage(\"No se han encontrado vídeos nuevos.\"); // Mostrar mensaje si no hay vídeos nuevos\n      }\n    } catch (error) {\n      console.error(\"Error cargando vídeos:\", error);\n      setDialogMessage(\"Ha ocurrido un error al cargar los vídeos. Por favor, inténtalo de nuevo más tarde.\"); // Mostrar mensaje de error\n    } finally {\n      setLoadingVideos(false); // Desactivar el spinner\n    }\n  };\n\n  // Efecto para cerrar el diálogo automáticamente después de 3 segundos\n  useEffect(() => {\n    if (dialogMessage && !loadingVideos) {\n      const timer = setTimeout(() => {\n        setDialogMessage(\"\"); // Limpiar el mensaje después de 3 segundos\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [dialogMessage, loadingVideos]);\n\n  // Componente del diálogo de carga\n  const LoadingDialog = ({\n    loading,\n    message\n  }) => {\n    if (!loading && !message) return null; // No mostrar si no hay carga ni mensaje\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-dialog\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\",\n        children: \"Cargando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleLoadLatestVideos(channelId, \"reviewerId\", lastCheckedVideoId),\n      disabled: loadingVideos,\n      children: loadingVideos ? \"Cargando...\" : \"Cargar últimos vídeos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadingDialog, {\n      loading: loadingVideos,\n      message: dialogMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reviewers-list\",\n      children: reviewers.map(reviewer => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reviewer-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: reviewer.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\xDAltimo v\\xEDdeo comprobado: \", reviewer.lastCheckedVideo]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, reviewer.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(All, \"PodvxvejUD0/MQ6yfvPA1uy3Wp0=\");\n_c = All;\nexport default All;\nvar _c;\n$RefreshReg$(_c, \"All\");","map":{"version":3,"names":["React","useState","useEffect","axios","YOUTUBE_API_KEY","jsxDEV","_jsxDEV","All","_s","loadingVideos","setLoadingVideos","dialogMessage","setDialogMessage","reviewers","setReviewers","channelId","setChannelId","lastCheckedVideoId","setLastCheckedVideoId","fetchVideoDetailsFromYoutube","videoId","response","get","data","items","length","snippet","error","console","handleLoadLatestVideos","reviewerId","alert","nextPageToken","latestVideos","foundOlderVideo","log","video","id","push","latestVideoId","updatedData","lastCheckedVideo","prevReviewers","map","reviewer","timer","setTimeout","clearTimeout","LoadingDialog","loading","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","name","_c","$RefreshReg$"],"sources":["C:/Users/milto/Documents/GitHub/Web-App-Gestor-de-Restaurants/src/screens/All.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./All.css\"; // Importa el archivo CSS para estilos\r\nimport { YOUTUBE_API_KEY } from \"./apiKeys\"; // Importa la API key de YouTube\r\n\r\nconst All = () => {\r\n  // Estados para manejar la carga y los mensajes\r\n  const [loadingVideos, setLoadingVideos] = useState(false); // Estado para el spinner\r\n  const [dialogMessage, setDialogMessage] = useState(\"\"); // Estado para el mensaje en el diálogo\r\n\r\n  // Estados para los datos del reviewer\r\n  const [reviewers, setReviewers] = useState([]); // Lista de reviewers\r\n  const [channelId, setChannelId] = useState(\"\"); // ID del canal de YouTube\r\n  const [lastCheckedVideoId, setLastCheckedVideoId] = useState(\"\"); // ID del último vídeo cargado\r\n\r\n  // Función para obtener detalles de un vídeo de YouTube\r\n  const fetchVideoDetailsFromYoutube = async (videoId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id=${videoId}&key=${YOUTUBE_API_KEY}`\r\n      );\r\n      if (response.data.items && response.data.items.length > 0) {\r\n        return response.data.items[0].snippet; // Devuelve los detalles del vídeo\r\n      }\r\n      return null; // Si no se encuentra el vídeo\r\n    } catch (error) {\r\n      console.error(\"Error al obtener detalles del video:\", error);\r\n      return null; // En caso de error\r\n    }\r\n  };\r\n\r\n  // Función para cargar los últimos vídeos de YouTube\r\n  const handleLoadLatestVideos = async (channelId, reviewerId, lastCheckedVideoId) => {\r\n    if (!channelId) {\r\n      alert(\"No se ha proporcionado un Channel ID.\");\r\n      return;\r\n    }\r\n\r\n    if (loadingVideos) return; // Evitar duplicación de solicitudes\r\n    setLoadingVideos(true); // Activar el spinner\r\n    setDialogMessage(\"\"); // Reiniciar el mensaje del diálogo\r\n\r\n    try {\r\n      let nextPageToken = null;\r\n      let latestVideos = [];\r\n      let foundOlderVideo = false;\r\n\r\n      console.log(\"Iniciando carga de vídeos...\");\r\n\r\n      // Bucle para obtener vídeos paginados\r\n      do {\r\n        console.log(`Solicitud realizada con token: ${nextPageToken}`);\r\n        const response = await axios.get(\r\n          `https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${channelId}&maxResults=10&order=date&pageToken=${nextPageToken || \"\"}&key=${YOUTUBE_API_KEY}`\r\n        );\r\n\r\n        // Procesar los vídeos obtenidos\r\n        for (const video of response.data.items) {\r\n          if (video.id.videoId === lastCheckedVideoId) {\r\n            foundOlderVideo = true; // Detener si encontramos el último vídeo cargado\r\n            console.log(\"Vídeo antiguo encontrado, deteniendo búsqueda...\");\r\n            break;\r\n          }\r\n          latestVideos.push(video); // Agregar el vídeo a la lista\r\n        }\r\n\r\n        nextPageToken = response.data.nextPageToken; // Actualizar el token de la siguiente página\r\n      } while (nextPageToken && !foundOlderVideo); // Continuar mientras haya más páginas y no se encuentre el vídeo más antiguo\r\n\r\n      // Si se encontraron vídeos nuevos\r\n      if (latestVideos.length > 0) {\r\n        const latestVideoId = latestVideos[0].id.videoId;\r\n        const updatedData = { lastCheckedVideo: `https://www.youtube.com/watch?v=${latestVideoId}` };\r\n\r\n        // Actualizar el último vídeo comprobado en Firebase (simulado aquí)\r\n        // await handleUpdateReviewer(reviewerId, updatedData);\r\n\r\n        // Actualizar el estado local de reviewers\r\n        setReviewers((prevReviewers) =>\r\n          prevReviewers.map((reviewer) =>\r\n            reviewer.id === reviewerId\r\n              ? { ...reviewer, lastCheckedVideo: `https://www.youtube.com/watch?v=${latestVideoId}` }\r\n              : reviewer\r\n          )\r\n        );\r\n\r\n        setDialogMessage(`Se han cargado ${latestVideos.length} vídeos nuevos.`); // Mostrar mensaje de éxito\r\n      } else {\r\n        setDialogMessage(\"No se han encontrado vídeos nuevos.\"); // Mostrar mensaje si no hay vídeos nuevos\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error cargando vídeos:\", error);\r\n      setDialogMessage(\"Ha ocurrido un error al cargar los vídeos. Por favor, inténtalo de nuevo más tarde.\"); // Mostrar mensaje de error\r\n    } finally {\r\n      setLoadingVideos(false); // Desactivar el spinner\r\n    }\r\n  };\r\n\r\n  // Efecto para cerrar el diálogo automáticamente después de 3 segundos\r\n  useEffect(() => {\r\n    if (dialogMessage && !loadingVideos) {\r\n      const timer = setTimeout(() => {\r\n        setDialogMessage(\"\"); // Limpiar el mensaje después de 3 segundos\r\n      }, 3000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [dialogMessage, loadingVideos]);\r\n\r\n  // Componente del diálogo de carga\r\n  const LoadingDialog = ({ loading, message }) => {\r\n    if (!loading && !message) return null; // No mostrar si no hay carga ni mensaje\r\n\r\n    return (\r\n      <div className=\"loading-dialog\">\r\n        {loading && <div className=\"spinner\">Cargando...</div>}\r\n        {message && <p>{message}</p>}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {/* Botón para cargar vídeos */}\r\n      <button\r\n        onClick={() => handleLoadLatestVideos(channelId, \"reviewerId\", lastCheckedVideoId)}\r\n        disabled={loadingVideos}\r\n      >\r\n        {loadingVideos ? \"Cargando...\" : \"Cargar últimos vídeos\"}\r\n      </button>\r\n\r\n      {/* Diálogo de carga */}\r\n      <LoadingDialog loading={loadingVideos} message={dialogMessage} />\r\n\r\n      {/* Resto del contenido */}\r\n      <div className=\"reviewers-list\">\r\n        {/* Lista de reviewers */}\r\n        {reviewers.map((reviewer) => (\r\n          <div key={reviewer.id} className=\"reviewer-card\">\r\n            <h3>{reviewer.name}</h3>\r\n            <p>Último vídeo comprobado: {reviewer.lastCheckedVideo}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default All;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}